#!/bin/bash
set -eu


has(){
    type "$1" > /dev/null 2>&1
}

symlink(){
    if [ -e "$2" ]; then
        echo -n "file $2 already exists. force link? [y/N]: "
        read ANS
        case $ANS in
            [Yy]* )
                mv "$2" "$2.bak"
                echo "$2.bak created"
                echo "linking $1 => $2"
                ln -s "$1" "$2"
                ;;
            * )
                echo "skipping..."
                ;;
        esac
    else
        echo "linking $1 => $2"
        ln -s "$1" "$2"
    fi
}

link(){
    dotfiles=$HOME/dotfiles

    has vim && symlink "$dotfiles/.vimrc" "$HOME/.vimrc"
    has git && symlink "$dotfiles/.gitconfig" "$HOME/.gitconfig"
    symlink "$dotfiles/.bashrc" "$HOME/.bashrc"
}

copy(){
    dotfiles=$HOME/dotfiles

    cp "$dotfiles/.vimrc" "$HOME/.vimrc"
    cp "$dotfiles/.bashrc" "$HOME/.bashrc"
}

pull(){
    dotfiles=$HOME/dotfiles
    cd "$dotfiles"
    git pull origin master
}

push(){
    dotfiles=$HOME/dotfiles
    cd "$dotfiles"
    msg=`git status -s | sed -e "s/^ //" -e "s/ /_/g"` || :
    git add .
    if git commit -m "$msg"; then
        git push origin master
        return 0
    fi
    return 1
}
sync(){
    pull
    push
    if [ "$(uname)" == "MINGW64_NT-10.0-18362" ]; then
        link
    fi
}
vi(){
    dotfiles=$HOME/dotfiles
    exec vi "$dotfiles"
}

if [ $# == 0 ]; then
    echo "no subcommand given. running \`dot sync\` ..."
    sync
    exit
fi

subcommand="$1"
shift

case $subcommand in
    pull)
        pull
        ;;
    push)
        push
        ;;
    sync)
        sync
        ;;
    copy)
        copy
        ;;
    link)
        link
        ;;
    vi)
        vi
        ;;
    *)
        echo "dotfiles commands"
        echo "pull"
        echo "push"
        echo "link"
        ;;
esac
