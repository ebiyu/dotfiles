[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = ['csv']

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']


[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'yarn install --frozen-lockfile'
on_ft = [
    'javascript',
    'typescript',
    'javascriptreact',
    'typescriptreact',
    'css',
    'less',
    'scss',
    'json',
    'graphql',
    'vue',
    'html',
    'markdown',
    'tex',
    'python',
    'go',
    'swift',
]
hook_source = '''
    let g:coc_global_extensions = [
        \ 'coc-tsserver',
        \ 'coc-pyright',
        \ 'coc-eslint',
        \ 'coc-html',
        \ 'coc-emmet',
        \ 'coc-css',
        \ 'coc-stylelint',
        \ 'coc-yaml',
        \ 'coc-highlight',
        \ 'coc-json',
        \ 'coc-vetur',
        \ 'coc-vimtex',
        \ 'coc-go',
        \ 'coc-clangd',
        \ ]

    autocmd Filetype javascript,typescript,javascriptreact,typescriptreact,css,less,scss,json,graphql,vue,html,markdown,tex,python,go,swift  call s:coc_open()

    function! s:coc_open() abort
      nnoremap <buffer><silent> <space><space> :call CocAction('doHover')<CR>
      nmap <buffer><silent> <C-]> <Plug>(coc-definition)
      nmap <buffer><silent> <C-t> <Plug>(coc-references)
      nmap <buffer><silent> <space>rn <Plug>(coc-rename)
      nmap <buffer><silent> <space>f <cmd>call CocAction('format')<CR>
    endfunction
'''

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'yarn install --frozen-lockfile'
on_ft = [
    'javascript',
    'typescript',
    'javascriptreact',
    'typescriptreact',
    'css',
    'less',
    'scss',
    'json',
    'graphql',
    'vue',
    'html',
    'markdown',
]
hook_source = '''
    "let g:prettier#autoformat = 1
    "let g:prettier#autoformat_require_pragma = 0
    let g:prettier#quickfix_enabled = 0
    " autocmd BufWritePre *.js,*.ts,*.vue,*.css,*.scss,*.json,*.md PrettierAsync
'''

[[plugins]]
repo = 'vim-denops/denops.vim'
hook_source = '''
  " Note: for profile
  " let g:denops#server#deno_args = [
  "     \ '-q',
  "     \ '--no-check',
  "     \ '--unstable',
  "     \ '-A',
  "     \ '--inspect',
  "     \ ]
'''

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = 'denops.vim'
on_map = [['i', '<c-k>'], ['c', '<c-k>']]
hook_source = '''
    imap <C-k> <Plug>(skkeleton-enable)
    cmap <C-k> <Plug>(skkeleton-enable)
    if isdirectory($HOME . '/.skk')
        call skkeleton#config({ 'globalJisyo': '~/.skk/SKK-JISYO.L' })
    endif
'''


[[plugins]]
repo = 'lambdalisue/gin.vim'
depends = 'denops.vim'
on_map = ['<space>g']
on_cmd = ['Gin*']
on_event = ['FocusLost', 'CursorHold']
hook_source = '''
    noremap <silent> <space>g <cmd>:split<cr><cmd>GinStatus<cr>
    autocmd FileType gin-status call s:gin_my_settings()
    function! s:gin_my_settings() abort
      nnoremap <buffer><silent> q <cmd>q<cr>
    endfunction
'''
